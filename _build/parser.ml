type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | RETURNS
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | VOID
  | STRING
  | LITERAL of (int)
  | FLOATLIT of (float)
  | STRINGLIT of (string)
  | ID of (string)
  | FUNCTION
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 47 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* TRUE *);
  276 (* FALSE *);
  277 (* AND *);
  278 (* OR *);
  279 (* RETURN *);
  280 (* RETURNS *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* WHILE *);
  285 (* INT *);
  286 (* FLOAT *);
  287 (* BOOL *);
  288 (* VOID *);
  289 (* STRING *);
  294 (* FUNCTION *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  290 (* LITERAL *);
  291 (* FLOATLIT *);
  292 (* STRINGLIT *);
  293 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\005\000\005\000\003\000\008\000\
\008\000\004\000\009\000\009\000\010\000\010\000\007\000\007\000\
\007\000\007\000\007\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\013\000\013\000\014\000\014\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\001\000\002\000\003\000\000\000\
\002\000\009\000\000\000\001\000\002\000\004\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\003\000\004\000\003\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\057\000\000\000\015\000\016\000\017\000\018\000\
\019\000\001\000\003\000\004\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\008\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\033\000\034\000\
\000\000\000\000\000\000\000\000\030\000\031\000\032\000\000\000\
\009\000\000\000\005\000\000\000\000\000\000\000\000\000\048\000\
\049\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\006\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\023\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\025\000\000\000\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\042\000\043\000\013\000\025\000\
\018\000\019\000\045\000\078\000\081\000\082\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\249\254\021\255\000\000\233\255\
\252\254\051\255\058\255\000\000\062\255\233\255\000\000\020\255\
\057\255\000\000\124\255\201\255\124\255\124\255\000\000\000\000\
\012\255\066\255\072\255\073\255\000\000\000\000\000\000\006\255\
\000\000\093\255\000\000\041\255\004\000\194\000\129\255\000\000\
\000\000\000\000\028\000\124\255\124\255\124\255\124\255\124\255\
\000\000\000\000\080\255\000\000\124\255\124\255\124\255\124\255\
\124\255\124\255\124\255\124\255\124\255\124\255\124\255\124\255\
\000\000\000\000\000\000\210\000\242\000\082\255\226\000\242\000\
\096\255\090\255\242\000\053\255\053\255\000\000\000\000\029\001\
\029\001\070\000\070\000\070\000\070\000\017\001\002\001\201\255\
\124\255\201\255\000\000\124\255\074\255\046\000\000\000\242\000\
\201\255\124\255\000\000\100\255\201\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\255\
\000\000\000\000\105\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\255\000\000\107\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\255\000\000\000\000\009\255\
\000\000\114\255\049\255\068\000\090\000\000\000\000\000\101\255\
\173\255\112\000\134\000\156\000\178\000\209\255\050\255\000\000\
\000\000\000\000\000\000\000\000\165\255\000\000\000\000\015\255\
\000\000\116\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\086\000\000\000\096\000\218\255\250\255\000\000\
\000\000\000\000\229\255\019\000\000\000\000\000"

let yytablesize = 559
let yytable = "\046\000\
\010\000\048\000\049\000\058\000\029\000\051\000\029\000\055\000\
\058\000\017\000\001\000\055\000\050\000\027\000\055\000\024\000\
\056\000\056\000\044\000\029\000\056\000\015\000\016\000\030\000\
\076\000\077\000\079\000\080\000\083\000\014\000\031\000\032\000\
\020\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\037\000\038\000\039\000\
\040\000\050\000\047\000\050\000\047\000\021\000\050\000\047\000\
\026\000\101\000\027\000\103\000\028\000\063\000\064\000\022\000\
\029\000\023\000\107\000\052\000\030\000\102\000\110\000\047\000\
\104\000\053\000\054\000\031\000\032\000\059\000\077\000\033\000\
\015\000\034\000\097\000\035\000\036\000\005\000\006\000\007\000\
\008\000\009\000\037\000\038\000\039\000\040\000\027\000\100\000\
\028\000\057\000\099\000\105\000\029\000\040\000\109\000\040\000\
\030\000\011\000\040\000\012\000\028\000\053\000\041\000\031\000\
\032\000\040\000\040\000\033\000\054\000\034\000\028\000\035\000\
\036\000\040\000\040\000\047\000\108\000\027\000\037\000\038\000\
\039\000\040\000\027\000\029\000\028\000\074\000\000\000\030\000\
\029\000\000\000\000\000\000\000\030\000\000\000\031\000\032\000\
\000\000\000\000\000\000\031\000\032\000\000\000\000\000\033\000\
\000\000\034\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\000\000\037\000\038\000\039\000\040\000\024\000\000\000\
\024\000\024\000\000\000\000\000\024\000\041\000\000\000\041\000\
\024\000\000\000\041\000\000\000\000\000\000\000\000\000\024\000\
\024\000\041\000\041\000\024\000\000\000\024\000\000\000\024\000\
\024\000\041\000\041\000\000\000\000\000\000\000\024\000\024\000\
\024\000\024\000\027\000\000\000\028\000\000\000\000\000\000\000\
\029\000\046\000\000\000\046\000\030\000\000\000\046\000\000\000\
\000\000\000\000\000\000\031\000\032\000\000\000\000\000\033\000\
\000\000\034\000\000\000\035\000\036\000\046\000\046\000\000\000\
\000\000\000\000\037\000\038\000\039\000\040\000\035\000\000\000\
\035\000\000\000\000\000\035\000\035\000\035\000\035\000\035\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\000\000\000\000\035\000\035\000\060\000\005\000\006\000\007\000\
\008\000\009\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\071\000\072\000\000\000\000\000\075\000\005\000\006\000\007\000\
\008\000\009\000\061\000\062\000\063\000\064\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\106\000\000\000\
\071\000\072\000\000\000\000\000\061\000\062\000\063\000\064\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\071\000\072\000\036\000\000\000\036\000\000\000\
\000\000\036\000\036\000\036\000\061\000\062\000\063\000\064\000\
\036\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\036\000\036\000\037\000\000\000\037\000\000\000\000\000\037\000\
\037\000\037\000\000\000\000\000\000\000\000\000\037\000\037\000\
\037\000\037\000\037\000\037\000\000\000\000\000\037\000\037\000\
\042\000\000\000\042\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\043\000\000\000\
\043\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\000\000\000\000\043\000\043\000\044\000\000\000\044\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\000\000\000\000\
\044\000\044\000\045\000\000\000\045\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\073\000\000\000\045\000\045\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\096\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\098\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\072\000\
\061\000\062\000\063\000\064\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\071\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\061\000\062\000\063\000\064\000\000\000\
\000\000\000\000\000\000\067\000\068\000\069\000\070\000"

let yycheck = "\027\000\
\000\000\029\000\030\000\042\000\001\001\033\000\003\001\002\001\
\047\000\016\000\001\000\003\001\001\001\002\001\006\001\022\000\
\011\001\003\001\025\000\008\001\006\001\001\001\002\001\012\001\
\052\000\053\000\054\000\055\000\056\000\037\001\019\001\020\001\
\037\001\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\034\001\035\001\036\001\
\037\001\001\001\001\001\003\001\003\001\003\001\006\001\006\001\
\037\001\096\000\002\001\098\000\004\001\009\001\010\001\006\001\
\008\001\004\001\105\000\002\001\012\001\097\000\109\000\022\001\
\100\000\002\001\002\001\019\001\020\001\037\001\106\000\023\001\
\001\001\025\001\001\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\002\001\006\001\
\004\001\005\001\003\001\026\001\008\001\001\001\003\001\003\001\
\012\001\003\001\006\001\003\001\001\001\003\001\025\000\019\001\
\020\001\013\001\014\001\023\001\003\001\025\001\003\001\027\001\
\028\001\021\001\022\001\028\000\106\000\002\001\034\001\035\001\
\036\001\037\001\002\001\008\001\004\001\005\001\255\255\012\001\
\008\001\255\255\255\255\255\255\012\001\255\255\019\001\020\001\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\027\001\028\001\034\001\035\001\036\001\
\037\001\255\255\034\001\035\001\036\001\037\001\002\001\255\255\
\004\001\005\001\255\255\255\255\008\001\001\001\255\255\003\001\
\012\001\255\255\006\001\255\255\255\255\255\255\255\255\019\001\
\020\001\013\001\014\001\023\001\255\255\025\001\255\255\027\001\
\028\001\021\001\022\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\002\001\255\255\004\001\255\255\255\255\255\255\
\008\001\001\001\255\255\003\001\012\001\255\255\006\001\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\027\001\028\001\021\001\022\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\001\001\029\001\030\001\031\001\
\032\001\033\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\255\255\255\255\001\001\029\001\030\001\031\001\
\032\001\033\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\001\001\255\255\
\021\001\022\001\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\008\001\007\001\008\001\009\001\010\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\022\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\003\001\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\003\001\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\003\001\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\007\001\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  RETURNS\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  FUNCTION\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOATLIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 35 "parser.mly"
            ( _1 )
# 366 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                        ([],[])
# 372 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 39 "parser.mly"
                        ((_2 :: fst _1), snd _1)
# 380 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 40 "parser.mly"
                        (fst _1, (_2 :: snd _1))
# 388 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 43 "parser.mly"
                        ( [_1] )
# 395 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 44 "parser.mly"
                        ( _2 :: _1 )
# 403 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 47 "parser.mly"
                        ( (_1, _2) )
# 411 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                        ([])
# 417 "parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 51 "parser.mly"
                         (_2 :: _1)
# 425 "parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'var_decl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
     ( { 
	 ftyp = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8
    } )
# 442 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                  ( [] )
# 448 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 65 "parser.mly"
                  ( List.rev _1 )
# 455 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                               ( [(_1, _2)] )
# 463 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
                             ( (_3, _4) :: _1 )
# 472 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
        ( Int )
# 478 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
          ( Float )
# 484 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
         ( Bool )
# 490 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
         ( Void )
# 496 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
           ( String )
# 502 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
              ( Expr _1 )
# 509 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
                ( Return Noexpr )
# 515 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                     ( Return _2 )
# 522 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 82 "parser.mly"
                            ( Block(List.rev _2) )
# 529 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 537 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                            ( If(_3, _5, _7) )
# 546 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 556 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                                  ( While(_3, _5) )
# 564 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                  ( Noexpr )
# 570 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                  ( _1 )
# 577 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 94 "parser.mly"
                     ( Literal(_1) )
# 584 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 95 "parser.mly"
                     ( FloatLit(_1) )
# 591 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                     ( StringLit(_1) )
# 598 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                     ( BoolLit(true) )
# 604 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                     ( BoolLit(false) )
# 610 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
                     ( Id(_1) )
# 617 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 625 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 633 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 641 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 649 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 657 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 665 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 673 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 689 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                         ( Unop(Neg, _2) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Unop(Not, _2) )
# 727 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Assign(_1, _3) )
# 735 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 115 "parser.mly"
                                 ( Call(_1, _3) )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                       ( _2 )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                  ( [] )
# 756 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 120 "parser.mly"
                  ( List.rev _1 )
# 763 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                            ( [_1] )
# 770 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                            ( _3 :: _1 )
# 778 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
